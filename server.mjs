import { createServer } from 'node:http';
import { serve, send } from 'micro';

import getGenFunction, { _404 } from './pugrouter.mjs';
import { URLSearchParams } from 'node:url';
import { parse as parseCookie } from 'cookie'; // https://www.npmjs.com/package/cookie
import DB from './mydb.mjs';


const 
  port = 3333,
  server = createServer(serve(async (request, response) => {
    console.log((new Date()).toLocaleTimeString(), request.method, request.url, 'HTTP/' + request.httpVersion);
    const 
      genFunction = getGenFunction(request),
      postData = 'POST' === request.method ? await getAndParsePostBody(request) : null,  
      cookies = parseCookie(request.headers.cookie || ''),
      user = await getUser(cookies,postData,response);
    if (genFunction) return genFunction({user});
    send(response, 404, _404);
  }));
server.listen(port, () => console.log('server start at http://localhost:' + port));

async function getAndParsePostBody(request) {
  // –æ–±—Ä–∞–±–æ—Ç–∫–∞ POST –∑–∞–ø—Ä–æ—Å–∞  —Å–ª–æ–∂–Ω–µ–µ —á–µ–º GET, –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ —Ä–∞–±–æ—Ç–∞—Ç—å —Å nodejs Stream —Å–º. https://habr.com/ru/post/479048/
  // —Å—É—Ç—å –≤ —Ç–æ–º —á—Ç–æ request —ç—Ç–æ —ç–∫–∑–µ–º–ø–ª—è—Ä –∫–ª–∞—Å—Å–∞ http.ClientRequest —Å–º https://nodejs.org/api/http.html#http_class_http_clientrequest
  // –∫–æ—Ç–æ—Ä—ã–π, –≤ —Å–≤–æ—é –æ—á–µ—Ä–µ–¥—å –Ω–∞—Å–ª–µ–¥–æ–≤–∞–Ω –æ—Ç Readable Stream —Å–º https://nodejs.org/api/stream.html#stream_stream
  // –ø—Ä–∏–º–µ—Ä –∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏: https://nodejs.org/api/stream.html#stream_api_for_stream_consumers
  // –µ—â–µ –ø—Ä–∏–º–µ—Ä: https://nodejs.org/en/docs/guides/anatomy-of-an-http-transaction/#request-body
  request.setEncoding('utf8'); // Get the data as utf8 strings. If an encoding is not set, Buffer objects will be received.    
  const body = await new Promise(resolve => {
    let buff = '';
    request
      .on('data', chunk => buff += chunk)
      .on('end', () => resolve(buff));
  });
  return new URLSearchParams(body); //  üåü –ø—Ä–∏–º–µ–Ω–∏–ª–∏ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å URLSearchParams() –¥–ª—è POST form data
}

async function getUser(cookies, searchParams, response) { // –ø–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ cookies –∏ –¥–∞–Ω–Ω—ã–º html-—Ñ–æ—Ä–º—ã
  let userId = null; // –≥–ª–∞–≤–Ω–æ–µ –≤ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏
  if (Object.keys(cookies).length > 0) console.log('\t cookies: ', cookies);

  // ‚úî –ß–ò–¢–ê–ï–ú cookies
  if (cookies.uid) { // –ø—Ä–æ–≤–µ—Ä–∏–º –Ω–µ –∑–∞–ª–æ–≥–∏–Ω–µ–Ω –ª–∏ —É–∂–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å?
    const testUserId = await DB.getUserByCookie(cookies.uid);
    if (testUserId) {
      userId = testUserId;
      console.log(`\t –∫–ª–∏–µ–Ω—Ç –ø—Ä–µ–¥—ä—è–≤–∏–ª –≤–∞–ª–∏–¥–Ω—ã–π cookie uid, id = ${userId}`);
    }
  }
  // ‚úî –û–ë–†–ê–ë–û–¢–ß–ò–ö –§–û–†–ú !!! 
  if (searchParams) { 
    console.log(`\t form data: ${searchParams}`);
    const 
      username = searchParams.get('username'),
      psw = searchParams.get('psw'),
      [id, secret] = await DB.loginUser(username, psw);
      // console.log('if',username ,psw , id , secret);
    if (username && psw && id && secret ) {
      userId = id ,
      response.setHeader('Set-Cookie',`uid=${secret}`);
      // responseHeaders['Set-Cookie'] = [`uid=${UID}`];  // ‚úî –£–°–¢–ê–ù–ê–í–õ–ò–í–ê–ï–ú –∫–ª–∏–µ–Ω—Ç—É cookie
      console.log(`\t login! id = ${userId}`);
    }
    if ('logout' === searchParams.get('action')) {  // –µ—Å–ª–∏ –ø–æ–∂–µ–ª–∞–µ—à—å –º—ã —Ç–µ–±—è —Ä–∞–∑–ª–æ–≥–∏–Ω–∏–º
      console.log(`\t logout! id=${userId}`);
      await DB.delOnlineUser(cookies.uid);
      userId = null;
      response.setHeader('Set-Cookie',`uid=${cookies.uid};Max-Age=0`);
      // responseHeaders['Set-Cookie'] = ['uid=;Max-Age=0']; // ‚úî –£–î–ê–õ–Ø–ï–ú cookie —É –∫–ª–∏–µ–Ω—Ç–∞
    }
  }
  if (userId) return await DB.getUserData(userId);
  return null;
}


